services:
  pg-analytics-service:
    image: postgres
    container_name: "pg-analytics-service"
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=test
      - POSTGRES_DB=analytics-service
    volumes:
      - pg1_data:/var/lib/postgresql/data

  pg-2:
    image: postgres
    container_name: "pg-2"
    ports:
      - "5433:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=test
      - POSTGRES_DB=billing-payment-service
    volumes:
      - pg2_data:/var/lib/postgresql/data

  pg-3:
    image: postgres
    container_name: "pg-3"
    ports:
      - "5434:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=test
      - POSTGRES_DB=postgres
    volumes:
      - pg3_data:/var/lib/postgresql/data

  contractservice:
    image: postgres
    container_name: "contract-service"
    ports:
      - "5436:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=test
      - POSTGRES_DB=contractservice
    volumes:
      - contractservice_data:/var/lib/postgresql/data

  pg-user-service:
    image: postgres
    container_name: "pg-user-service"
    ports:
      - "5435:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=test
      - POSTGRES_DB=userservice
    volumes:
      - pg_user_service_data:/var/lib/postgresql/data

  pg-customer-support-service:
    image: postgres
    container_name: pg-customer-support-service
    ports:
    - "5437:5432"
    environment:
    - POSTGRES_USER=postgres
    - POSTGRES_PASSWORD=test
    - POSTGRES_DB=customer-support
    volumes:
    - pg_customer_support_service_data:/var/lib/postgresql/data


  user-service:
    build:
      context: ./user-service
      dockerfile: Dockerfile
    container_name: "user-service"
    ports:
      - "8081:8080"
    depends_on:
      - pg-user-service
      - kafka
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://pg-user-service:5432/userservice
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: test

  billing-payment-service:
    image: turkcell-billing-payment-service
    container_name: billing_payment_service
    ports:
      - "8085:8085"
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://pg-2:5433/postgres

  analytics-service:
    image: turkcell-analytics-service
    container_name: analytics_service
    ports:
      - "8083:8083"
    depends_on:
      - kafka
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://pg-3:5432/postgres
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092

  notification-service:
    image: turkcell-notification-service
    container_name: notification_service
    ports:
      - "8088:8088"
    depends_on:
      - mongo
      - kafka
    environment:
      - SPRING_DATA_MONGODB_URI=mongodb://root:root@mongo:27017/notification_db?authSource=admin
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:9092

  kafka:
    image: bitnami/kafka
    container_name: "kafka"
    ports:
      - "9092:9092"
    environment:
      - KAFKA_ENABLE_KRAFT=yes
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:9094
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://localhost:9092
      - KAFKA_BROKER_ID=1
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@127.0.0.1:9093
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_AUTO_CREATE_TOPICS_ENABLE=true
      - BITNAMI_DEBUG=yes
      - KAFKA_CFG_NUM_PARTITIONS=2

  mysql:
    image: mysql:latest
    container_name: "mysql"
    ports:
      - "3306:3306"
    environment:
      - MYSQL_ROOT_PASSWORD=root
      - MYSQL_DATABASE=my_database
      - MYSQL_USER=myuser
      - MYSQL_PASSWORD=test
    volumes:
      - mysql_data:/var/lib/mysql

  mongo:
    image: mongo
    ports:
      - 27017:27017
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: root

  prometheus:
    image: prom/prometheus
    ports:
      - 9090:9090
    volumes:
      - prometheus_data:/prometheus
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - ./alert.rules.yml:/etc/prometheus/alert.rules.yml
  alertmanager:
    image: prom/alertmanager
    ports:
      - 9093:9093
    volumes:
      - ./alertmanager.yml:/etc/alertmanager/alertmanager.yml
  grafana:
    image: grafana/grafana
    container_name: grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    depends_on:
      - prometheus
  zipkin:
    image: openzipkin/zipkin
    ports:
      - 9411:9411

  kafdrop:
    image: obsidiandynamics/kafdrop
    container_name: kafdrop
    ports:
      - "9000:9000"
    environment:
      KAFKA_BROKERCONNECT: "kafka:9092"
      JVM_OPTS: "-Xms32M -Xmx64M"

volumes:
  pg_analytics_service_data:
  pg_customer_support_service_data:
  pg2_data:
  pg3_data:
  contractservice_data:
  mysql_data:
  pg_user_service_data:
  grafana_data:
  prometheus_data:
#
# 2 mongo ve 1 mysql eklenecek
