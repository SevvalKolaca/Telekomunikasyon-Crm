services:
  pg-analytics-service:
    image: postgres
    container_name:  "pg-analytics-service"
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=test
      - POSTGRES_DB=analytics-service
    volumes:
      - pg_analytics_service_data:/var/lib/postgresql/data

  pg-customer-support-service:
    image: postgres
    container_name: "pg-customer-support-service"
    ports:
      - "5437:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=test
      - POSTGRES_DB=customer-support-service
    volumes:
      - pg_customer_support_service_data:/var/lib/postgresql/data

  pg-2:
    image: postgres
    container_name: "pg-2"
    ports:
      - "5433:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=test
      - POSTGRES_DB=billing-payment-service
    volumes:
      - pg2_data:/var/lib/postgresql/data

  pg-3:
    image: postgres
    container_name: "pg-3"
    ports:
      - "5434:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=test
      - POSTGRES_DB=postgres
    volumes:
      - pg3_data:/var/lib/postgresql/data

  pg-contract-service:
    image: postgres
    container_name: "pg-contract-service"
    ports:
      - "5436:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=test
      - POSTGRES_DB=contractservice
    volumes:
      - contractservice_data:/var/lib/postgresql/data

  pg-user-service:
    image: postgres
    container_name: "pg-user-service"
    ports:
      - "5435:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=test
      - POSTGRES_DB=userservice
    volumes:
      - pg_user_service_data:/var/lib/postgresql/data

  user-service:
    build:
      context: ./user-service
      dockerfile: Dockerfile
    image: turkcell-user-service
    container_name: "user-service"
    ports:
      - "8081:8081"
    depends_on:
      - pg-user-service
      - kafka
      - discovery-server
      - gateway-server
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://pg-user-service:5432/userservice
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: test
      SPRING_CLOUD_CONFIG_PROFILE: local


  billing-payment-service:
    build:
      context: ./billing-payment-service
      dockerfile: Dockerfile
    image: turkcell-billing-payment-service
    container_name: billing_payment_service
    ports:
      - "8085:8085"
    depends_on:
      config-server:
        condition: service_healthy
      pg-2:
        condition: service_started
      discovery-server:
        condition: service_started
      gateway-server:
        condition: service_started
    environment:
      SPRING_CLOUD_CONFIG_PROFILE: local

  contract-service:
    build:
      context: ./contract-service
      dockerfile: Dockerfile
    image: turkcell-contract-service
    container_name: contract_service
    ports:
      - "8083:8083"
    depends_on:
      config-server:
        condition: service_healthy
      discovery-server:
        condition: service_started
      pg-contract-service:
        condition: service_started
      gateway-server:
        condition: service_started
      kafka:
        condition: service_started
    environment:
      SPRING_CLOUD_CONFIG_PROFILE: local

  config-server:
    build:
      context: ./config-server
      dockerfile: Dockerfile
    image: turkcell-config-server
    container_name: config_server
    ports:
      - "8089:8089"
    depends_on:
      - discovery-server
      - gateway-server
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8089/actuator/health"]
      interval: 10s
      retries: 10
      start_period: 10s
      timeout: 5s

  discovery-server:
    build:
      context: ./discovery-server
      dockerfile: Dockerfile
    image: turkcell-discovery-server
    container_name: discovery-server
    ports:
      - "8888:8888"

  gateway-server:
    build:
      context: ./gateway-server
      dockerfile: Dockerfile
    image: turkcell-gateway-server
    container_name: gateway-server
    ports:
      - "8080:8080"
    depends_on:
      - discovery-server

  plan-service:
    build:
      context: ./plan-service
      dockerfile: Dockerfile
    image: turkcell-plan-service
    container_name: plan-service
    ports:
      - "8084:8084"
    depends_on:
      config-server:
        condition: service_healthy
      pg-3:
        condition: service_started
      discovery-server:
        condition: service_started
      gateway-server:
        condition: service_started
    environment:
      SPRING_PROFILES_ACTIVE: local
      SPRING_DATASOURCE_URL: jdbc:postgresql://pg-3:5432/postgres
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: test
      SPRING_CLOUD_CONFIG_PROFILE: local
      SPRING_CLOUD_CONFIG_URI: http://config-server:8089
      SPRING_CONFIG_IMPORT: configserver:http://config-server:8089



  analytics-service:
    build:
      context: ./analytics-service
      dockerfile: Dockerfile
    image: turkcell-analytics-service
    container_name: analytics-service
    ports:
      - "8087:8087"
    depends_on:
      config-server:
        condition: service_healthy
      kafka:
        condition: service_started
      pg-analytics-service:
        condition: service_started
      discovery-server:
        condition: service_started
      gateway-server:
        condition: service_started
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://pg-analytics-service:5432/analytics-service
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092


  customer-support-service:
    build:
      context: ./customer-support-service
      dockerfile: Dockerfile
    image: turkcell-customer-support-service
    container_name: customer-support-service
    ports:
      - "8086:8086"
    depends_on:
      config-server:
        condition: service_healthy
      discovery-server:
        condition: service_started
      gateway-server:
        condition: service_started
      pg-customer-support-service:
        condition: service_started


  customer-service:
    build:
      context: ./customer-service
      dockerfile: Dockerfile
    image: turkcell-customer-service
    container_name: customer-service
    ports:
      - "8082:8082"
    environment:
      - SPRING_DATASOURCE_URL=jdbc:mysql://mysql:3306/my_database?useSSL=false&serverTimezone=UTC&allowPublicKeyRetrieval=true&createDatabaseIfNotExist=true
      - SPRING_DATASOURCE_USERNAME=myuser
      - SPRING_DATASOURCE_PASSWORD=test
      - SPRING_JPA_HIBERNATE_DDL_AUTO=update
      - SPRING_JPA_SHOW_SQL=true
      - SPRING_JPA_PROPERTIES_HIBERNATE_DIALECT=org.hibernate.dialect.MySQL8Dialect
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - SPRING_KAFKA_CONSUMER_GROUP_ID=customer-service-group
      - SPRING_KAFKA_CONSUMER_AUTO_OFFSET_RESET=earliest
      - SPRING_KAFKA_CONSUMER_KEY_DESERIALIZER=org.apache.kafka.common.serialization.StringDeserializer
      - SPRING_KAFKA_CONSUMER_VALUE_DESERIALIZER=org.apache.kafka.common.serialization.StringDeserializer
      - SPRING_KAFKA_PRODUCER_KEY_SERIALIZER=org.apache.kafka.common.serialization.StringSerializer
      - SPRING_KAFKA_PRODUCER_VALUE_SERIALIZER=org.apache.kafka.common.serialization.StringSerializer
      - EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE=http://discovery-server:8888/eureka/
      - SPRING_CLOUD_CONFIG_PROFILE=localdevad
      - SPRING_CLOUD_CONFIG_URI=http://config-server:8089
      - SPRING_CONFIG_IMPORT=optional:configserver:http://config-server:8089
    depends_on:
      config-server:
        condition: service_healthy
      kafka:
        condition: service_started
      discovery-server:
        condition: service_started
      gateway-server:
        condition: service_started
      mysql:
        condition: service_started


  notification-service:
    build:
      context: ./notification-service
      dockerfile: Dockerfile
    image: turkcell-notification-service
    container_name: notification_service
    ports:
      - "8088:8088"
    depends_on:
      - mongo
      - kafka
      - discovery-server
      - gateway-server
      - config-server
    environment:
      - SPRING_DATA_MONGODB_URI=mongodb://root:root@mongo:27017/notification_db?authSource=admin
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:9092

  kafka:
    image: bitnami/kafka
    container_name: "kafka"
    ports:
      - "9092:9092"
    environment:
      - KAFKA_ENABLE_KRAFT=yes
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:9094
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_BROKER_ID=1
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@127.0.0.1:9093
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_AUTO_CREATE_TOPICS_ENABLE=true
      - BITNAMI_DEBUG=yes
      - KAFKA_CFG_NUM_PARTITIONS=2

  mysql:
    image: mysql:latest
    container_name: "mysql"
    ports:
      - "3306:3306"
    environment:
      - MYSQL_ROOT_PASSWORD=root
      - MYSQL_DATABASE=my_database
      - MYSQL_USER=myuser
      - MYSQL_PASSWORD=test
    volumes:
      - mysql_data:/var/lib/mysql

  mongo:
    image: mongo
    ports:
      - 27017:27017
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: root

  prometheus:
    image: prom/prometheus
    ports:
      - 9090:9090
    volumes:
      - prometheus_data:/prometheus
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - ./alert.rules.yml:/etc/prometheus/alert.rules.yml

  alertmanager:
    image: prom/alertmanager
    ports:
      - 9093:9093
    volumes:
      - ./alertmanager.yml:/etc/alertmanager/alertmanager.yml

  papercut-smtp:
    image: jijiechen/papercut
    container_name: papercut-smtp
    ports:
      - "25:25"      # SMTP portu
      - "37408:37408" # Web arayüzü portu
    restart: always

  grafana:
    image: grafana/grafana
    container_name: grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    depends_on:
      - prometheus

  zipkin:
    image: openzipkin/zipkin
    ports:
      - 9411:9411

  kafdrop:
    image: obsidiandynamics/kafdrop
    container_name: kafdrop
    ports:
      - "9000:9000"
    depends_on:
      - kafka
    environment:
      KAFKA_BROKERCONNECT: "kafka:9092"
      JVM_OPTS: "-Xms32M -Xmx64M"



volumes:
  pg_analytics_service_data:
  pg_customer_support_service_data:
  pg2_data:
  pg3_data:
  contractservice_data:
  mysql_data:
  pg_user_service_data:
  grafana_data:
  prometheus_data:

